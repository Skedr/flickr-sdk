import type { Response } from 'superagent;
import type OAuth from './services/oauth';
import type Feeds from './services/feeds';
import type Upload from './services/upload';
import type Replace from './services/replace';

<%_ function printMethods(map, prefix){ _%>
	<%_ Object.entries(map).forEach(([key, value]) => { _%>
		<%_ if (typeof value === 'string') { _%>
<%= prefix %>/** [Flickr docs](<%= getDocsURL(value) %>) - Permissions: `<%= getPerms(value) %>` */
<%= prefix %><%= key _%>(options: {
			<%_ getArguments(value).filter(({ name }) => name !== 'api_key').forEach(({ name, optional }) => { _%>
<%= prefix %>	<%= name %><%= parseInt(optional, 10) ? '?' : '' %>: string | number;
			<%_ }); _%>
<%= prefix %>}): Promise<Response>;
		<%_ } else { _%>
<%= prefix %><%= key _%>: {
<%= printMethods(value, `${prefix}\t`) _%>
<%= prefix %>};
		<%_ } _%>
	<%_ }); _%>
<%_ } _%>

declare class Flickr {
	static OAuth = OAuth;
	static Feeds = Feeds;
	static Upload = Upload;
	static Replace = Replace;

	constructor(auth: string);
<%= printMethods(methodTree, '\t') _%>
}

export = Flickr;
